MOST COMMON API IMPORTS:
1: GetProcAddress (2440)
2: GetLastError (2191)
3: GetCurrentThreadId (2152)
4: GetCurrentProcess (2137)
5: Sleep (2117)
6: CloseHandle (2056)
7: GetCurrentProcessId (2021)
8: GetTickCount (2012)
9: TerminateProcess (1981)
10: UnhandledExceptionFilter (1971)

_____

Most common API imports (malware)
1: GetProcAddress (1422 times)  (overall rank = [0])
2: ExitProcess (1154 times)  (overall rank = [18])
3: GetLastError (1092 times)  (overall rank = [1])
4: CloseHandle (1063 times)  (overall rank = [5])
5: LoadLibraryA (1042 times)  (overall rank = [16])
6: GetModuleHandleA (996 times)  (overall rank = [25])
7: WriteFile (959 times)  (overall rank = [15])
8: Sleep (942 times)  (overall rank = [4])
9: GetCurrentProcess (931 times)  (overall rank = [3])
10: GetCurrentThreadId (921 times)  (overall rank = [2])

Most common API imports (non-malware)
1: GetCurrentThreadId (1231 times) (overall rank = [2])
2: GetCurrentProcess (1206 times) (overall rank = [3])
3: GetSystemTimeAsFileTime (1198 times) (overall rank = [10])
4: QueryPerformanceCounter (1196 times) (overall rank = [11])
5: GetCurrentProcessId (1195 times) (overall rank = [6])
6: TerminateProcess (1181 times) (overall rank = [8])
7: Sleep (1175 times) (overall rank = [4])
8: UnhandledExceptionFilter (1165 times) (overall rank = [9])
9: SetUnhandledExceptionFilter (1157 times) (overall rank = [12])
10: GetTickCount (1147 times) (overall rank = [7])

-----

$ ./train.py data/train.csv imports_train.json data/test.csv imports_test.json model-decision-tree.pkl
1: _amsg_exit (0.18367600145821109)
2: _CorDllMain (0.17880290931480536)
3: RtlLookupFunctionEntry (0.09130343781001954)
4: GetModuleHandleA (0.037464278081547134)
5: __p__commode (0.028385018083434764)
6: __vbaExceptHandler (0.028115729238182792)
7: SetEvent (0.021263720009904882)
8: GetProcAddress (0.019861600313876144)
9: <unk> (0.01820282397428034)
10: DisableThreadLibraryCalls (0.017432720216068658)

Accuracy: 0.899


$ ./train.py data/train.csv imports_train.json data/test.csv imports_test.json model-random-forest.pkl
1: GetProcAddress (0.035907353225071395)
2: _CorDllMain (0.028538737234061324)
3: LoadLibraryA (0.02836379686294764)
4: ExitProcess (0.016869071979707218)
5: GetModuleHandleA (0.013909930475706857)
6: RtlLookupFunctionEntry (0.010667166352151673)
7: _amsg_exit (0.010610134228877454)
8: __vbaExceptHandler (0.010382615558921148)
9: free (0.009970932304158584)
10: EVENT_SINK_Release (0.008720886883044884)

Accuracy: 0.919


$ ./train.py data/train.csv imports_train.json data/test.csv imports_test.json model-naive-bayes.pkl
Accuracy: 0.702


$ ./train.py data/train.csv imports_train.json data/test.csv imports_test.json model-adaboost.pkl
1: __vbaExceptHandler (0.04)
2: GetProcAddress (0.04)
3: WriteConsoleA (0.02)
4: CorBindToRuntimeEx (0.02)
5: GetSystemInfo (0.02)
6: NtOpenProcessToken (0.02)
7: _amsg_exit (0.02)
8: OleUninitialize (0.02)
9: InternetOpenA (0.02)
10: SetHandleCount (0.02)

Accuracy: 0.828

------

$ ./train2.py data/imports_full.json data/full.csv
Decision Tree
	Accuracy: [0.89, 0.9, 0.8878878878878879, 0.8928928928928929, 0.8838838838838838] 0.890932932932933
	Precision: [0.9045643153526971, 0.9094650205761317, 0.9014373716632443, 0.8943089430894309, 0.8938775510204081] 0.9007306403403824
	Recall: [0.872, 0.8875502008032129, 0.8727634194831014, 0.8888888888888888, 0.8725099601593626] 0.8787424938669132
Random Forest
	Accuracy: [0.927, 0.927, 0.913913913913914, 0.923923923923924, 0.9329329329329329] 0.9249541541541542
	Precision: [0.9330628803245437, 0.9158512720156555, 0.9352818371607515, 0.9215291750503019, 0.9429735234215886] 0.9297397375945682
	Recall: [0.92, 0.9397590361445783, 0.8906560636182903, 0.9252525252525252, 0.9223107569721115] 0.9195956763975011
AdaBoost
	Accuracy: [0.827, 0.828, 0.8578578578578578, 0.8508508508508509, 0.8338338338338338] 0.8395085085085084
	Precision: [0.7804459691252144, 0.7931654676258992, 0.8240574506283662, 0.8045774647887324, 0.7916666666666666] 0.7987826037669757
	Recall: [0.91, 0.8855421686746988, 0.9125248508946322, 0.9232323232323232, 0.9083665338645418] 0.9079331753332393
Naive Bayes
	Accuracy: [0.702, 0.672, 0.6826826826826827, 0.6716716716716716, 0.7207207207207207] 0.689815015015015
	Precision: [0.6335978835978836, 0.609254498714653, 0.6223684210526316, 0.6103038309114928, 0.6517006802721088] 0.625445062909754
	Recall: [0.958, 0.9518072289156626, 0.9403578528827038, 0.9333333333333333, 0.954183266932271] 0.9475363364127941

